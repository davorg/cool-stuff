#!/usr/bin/env perl

use strict;
use warnings;

use builtin qw[trim];

use OpenAPI::Client::OpenAI;
use YAML qw(LoadFile DumpFile);
use Time::Piece;
use JSON::MaybeXS;
use Encode qw[encode];

my $debug = @ARGV && ($ARGV[0] eq 'debug');

my $api_key = $ENV{"OPENAI_API_KEY"} or die "OPENAI_API_KEY is not set\n";

my $client = OpenAPI::Client::OpenAI->new;

my $file = "docs/_data/coolstuff.yml";
my $entries = LoadFile($file);

my @urls = map { $_->{url} } @$entries;

my $prompt = join " ",
  "Suggest a really cool, creative, or fun website to feature today on a site called 'Cool Stuff'.",
  "Just return the name, URL, and a one-paragraph description of why it's cool. Only return one site.",
  "Return the data in JSON format. Just the JSON with no Markdown around it.",
  "All keys in the JSON should be in lower case."
  "Do not include sites we have already featured: ", join ', ', @urls;

my $response_format = {
  '$schema' => "https://json-schema.org/draft/2020-12/schema",
  '$id' => "https://cool-stuff.co.uk/schema/coolsite.schema.json",
  "title" => "Cool Site Entry",
  "description" => "A single entry for a cool website generated by ChatGPT.",
  "type" => "object",
  "required" => ["name", "url", "description"],
  "properties" => {
    "name" => {
      "type" => "string",
      "description" => "The name of the featured site."
    },
    "url" => {
      "type" => "string",
      "format" => "uri",
      "description" => "The URL of the site. Must be a valid HTTPS or HTTP link."
    },
    "description" => {
      "type" => "string",
      "description" => "A paragraph or two about why the site is cool. May contain multiple lines."
    }
  },
  "additionalProperties" => 0,
};

my $res = $client->createChatCompletion({
  body => {
    model => 'gpt-4o',
    messages => [
        { role => 'system', content => 'You are a helpful curator of awesome websites.' },
        { role => 'user', content => $prompt },
    ],
    temperature => 1.0,
  },
  response_format => {
    type => 'json_schema',
    json_schema => $response_format,
  }
});

my $text = $res->res->json->{choices}[0]{message}{content};
$text = encode('UTF-8', $text);

if ($debug) {
  print "$text\n";
  exit;
}

my $new_entry = JSON::MaybeXS::decode_json($text);

$new_entry->{date} = localtime->ymd;

if ($debug) {
  print JSON::MaybeXS::encode_json($new_entry);
  exit;
}

unless (grep { $_->{url} eq $new_entry->{url} } @$entries) {
  push @$entries, $new_entry;
  DumpFile($file, $entries);
}
